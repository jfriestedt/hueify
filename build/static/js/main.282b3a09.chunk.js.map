{"version":3,"sources":["reducers/root_reducer.js","reducers/tokens.js","reducers/spotify_player_mount_status.js","reducers/spotify_player_state.js","reducers/hue_bridge_ips.js","reducers/palette.js","components/album_art.js","components/color_extractor.js","components/login.js","components/player_interface.js","components/hue_interface.js","components/track_info.js","App.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","tokens","state","type","payload","assign","refreshToken","spotifyPlayerMountStatus","spotifyPlayerState","playerState","bridgeIPs","palette","connect","image","chain","get","find","width","value","glowColor","length","nth","getHex","albumArtUrl","url","containerStyle","spotifyPlayerMounted","boxShadow","height","transitionDelay","CSSTransition","in","exit","timeout","classNames","unmountOnExit","style","alt","src","decoding","transition","ColorExtractor","margin","paletteStyleBase","boxSizing","display","lineHeight","swatchStyleBase","flexGrow","fontSize","map","swatch","sort","join","nextProps","this","props","getPaletteID","keys","swatchName","assignIn","name","filter","getRgb","sortBy","sum","Vibrant","filters","getPalette","err","dispatch","sortPalette","prevProps","generateNewPalette","colorHex","backgroundColor","key","styleBase","borderColor","border","swatches","renderSwatch","id","isEmpty","renderPalette","Component","loggedIn","className","href","PlayerInterface","mounting","error","window","onSpotifyWebPlaybackSDKReady","setState","player","Spotify","Player","getOAuthToken","cb","refreshTokenUrl","fetch","then","response","json","access_token","addListener","message","console","log","device_id","URLSearchParams","location","search","prevState","spotifyPlayerMountReady","mountPlayer","loading","renderConnectPrompt","Helmet","renderDeviceInfoLoading","renderDeviceInfo","HueInterface","ok","bridges","bridge","internalipaddress","forEach","ip","method","body","JSON","stringify","devicetype","parsedResponse","attemptUserCreations","pollingTimeout","setInterval","beginPolling","position","currentTrack","title","artists","App","browserInfo","Bowser","parse","navigator","userAgent","isBrowserSupported","mainStyleBase","flexDirection","alignItems","justifyContent","mainStyle","darkHex","color","lightHex","first","last","Boolean","hostname","match","ReactDOM","render","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.282b3a09.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport tokens from './tokens';\nimport spotifyPlayerMountStatus from './spotify_player_mount_status'\nimport spotifyPlayerState from './spotify_player_state'\nimport bridgeIPs from './hue_bridge_ips'\nimport palette from './palette'\n\nexport default combineReducers({\n  tokens,\n  spotifyPlayerMountStatus,\n  spotifyPlayerState,\n  bridgeIPs,\n  palette\n});\n","import { assign } from 'lodash';\n\nexport default (state = {}, { type, payload }) => {\n  switch (type) {\n    case 'REGISTER_TOKENS':\n      return assign({}, state, { refreshToken: payload });\n    default:\n      return state;\n  }\n}\n","export default (state = 'NOT_READY', { type }) => {\n  switch (type) {\n    case 'SPOTIFY_PLAYER_MOUNT_READY':\n    case 'SPOTIFY_PLAYER_MOUNTED':\n      return type\n    default:\n      return state;\n  }\n}\n","export default (state = {}, { type, state: playerState }) => {\n  switch (type) {\n    case 'SPOTIFY_PLAYER_STATE_CHANGED':\n      return playerState;\n    default:\n      return state;\n  }\n}\n","export default (state = [], { type, payload }) => {\n  switch (type) {\n    case 'HUE_BRIDGES_DISCOVERED':\n      return payload\n    default:\n      return state;\n  }\n}\n","export default (state = [], { type, payload }) => {\n  switch (type) {\n    case 'NEW_PALETTE':\n      return payload;\n    case 'NO_PALETTE':\n      return {}\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { assign, chain, nth } from 'lodash';\n\nconst AlbumArt = ({ albumArtUrl, glowColor, spotifyPlayerMounted }) => {\n  const containerStyle = {\n    boxShadow: `0 0 100px ${glowColor}`,\n    height: '300px',\n    transitionDelay: '600ms',\n    width: '300px'\n  }\n  const imgStyle = {\n    transition: 'box-shadow 0.5s ease'\n  }\n\n  return <CSSTransition in={!!albumArtUrl}\n                        exit={false}\n                        timeout={200}\n                        classNames='fade'\n                        unmountOnExit >\n    <div style={containerStyle}>\n      {albumArtUrl ?\n        <img alt='album art'\n             src={albumArtUrl}\n             height='300'\n             width='300'\n             decoding='sync'\n             style={imgStyle} /> :\n        null}\n    </div>\n  </CSSTransition>\n}\n\nconst mapStateToProps = ({ palette, spotifyPlayerState }) => {\n  const image = chain(spotifyPlayerState)\n    .get(['track_window', 'current_track', 'album', 'images'])\n    .find({ width: 300 })\n    .value();\n  const glowColor = palette ?\n    palette.length > 1 ?\n      nth(palette, ((palette.length / 2) - 1)).getHex() :\n      '#FFFFFF' :\n    null;\n\n  return {\n    albumArtUrl: image ? image.url : null,\n    glowColor,\n  }\n}\n\nexport default connect(mapStateToProps)(AlbumArt)\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport { assign, assignIn, chain, isEmpty, nth, sum } from 'lodash'\nimport * as Vibrant from 'node-vibrant'\n\nclass ColorExtractor extends Component {\n  constructor () {\n    super();\n    this.containerStyle = {\n      width: '300px',\n      height: '50px',\n      margin: '20px 0',\n      transitionDelay: '900ms'\n    };\n    this.paletteStyleBase = {\n      boxSizing: 'border-box',\n      display: 'flex',\n      height: '100%',\n      lineHeight: '0'\n    };\n    this.swatchStyleBase = {\n      flexGrow: '1',\n      fontSize: '6px',\n      height: '100%',\n      transition: 'background-color 0.5s ease'\n    };\n  }\n\n  getPaletteID (palette) {\n    return chain(palette)\n      .map((swatch) => swatch.getHex())\n      .sort()\n      .join('_')\n      .value();\n  }\n\n  shouldComponentUpdate (nextProps) {\n    return (\n      nextProps.albumArtUrl !== this.props.albumArtUrl ||\n      (\n        this.getPaletteID(nextProps.palette) !==\n        this.getPaletteID(this.props.palette)\n      )\n    )\n  }\n\n  sortPalette (palette) {\n    return chain(palette)\n      .keys()\n      .map((swatchName) => {\n        return assignIn({}, palette[swatchName], { name: swatchName })\n      })\n      .filter((swatch) => swatch.getRgb)\n      .sortBy((swatch) => sum(swatch.getRgb()))\n      .value();\n  }\n\n  generateNewPalette () {\n    const vib = new Vibrant(this.props.albumArtUrl, {\n      filters: []\n    });\n\n    vib.getPalette((err, palette) => {\n      this.props.dispatch({\n        type: 'NEW_PALETTE',\n        payload: this.sortPalette(palette)\n      });\n    });\n  }\n\n  componentDidUpdate (prevProps) {\n    if (prevProps.albumArtUrl && !this.props.albumArtUrl) {\n      this.props.dispatch({ type: 'NO_PALETTE' });\n    } else if (prevProps.albumArtUrl !== this.props.albumArtUrl) {\n      this.generateNewPalette();\n    }\n  }\n\n  renderSwatch (swatch) {\n    const colorHex = swatch.getHex(),\n          style = assign({}, this.swatchStyleBase, { backgroundColor: colorHex })\n\n    return <div key={swatch.name} style={style}></div>;\n  }\n\n  renderPalette (palette, styleBase) {\n    const borderColor = palette.length === 1 ?\n      '#FFFFFF' :\n      nth(palette, (palette.length / 2)).getHex()\n    const style = assign({}, styleBase, { border: `1px solid ${borderColor}` });\n    const swatches = chain(palette)\n      .map((swatch) => this.renderSwatch(swatch))\n      .value();\n\n    return <div id='palette' style={style}>{swatches}</div>;\n  }\n\n  render () {\n    return <CSSTransition in={!!this.props.albumArtUrl}\n                          exit={false}\n                          timeout={200}\n                          classNames='fade'\n                          unmountOnExit >\n      <div style={this.containerStyle}>\n        {isEmpty(this.props.palette) ?\n          null :\n          this.renderPalette(this.props.palette, this.paletteStyleBase)}\n      </div>\n    </CSSTransition>\n  }\n}\n\nconst mapStateToProps = ({ spotifyPlayerState, palette }) => {\n  const image = chain(spotifyPlayerState)\n    .get(['track_window', 'current_track', 'album', 'images'])\n    .find({ width: 64 })\n    .value();\n\n  return {\n    albumArtUrl: image ? image.url : '',\n    palette\n  }\n}\n\nexport default connect(mapStateToProps)(ColorExtractor);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LoginPrompt = ({ loggedIn }) => {\n  return loggedIn\n    ? null\n    : <a className='button' href='/login'>Log in to Spotify</a>\n}\n\nconst mapStateToProps = (state) => {\n  const { tokens: { refreshToken } } = state\n  return { loggedIn: !!refreshToken }\n}\n\nexport default connect(mapStateToProps)(LoginPrompt);\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport { CSSTransition } from 'react-transition-group';\nimport '../App.scss'\n\nclass PlayerInterface extends Component {\n  constructor () {\n    super();\n\n    this.state = { mounting: false, error: null }\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      this.props.dispatch({ type: 'SPOTIFY_PLAYER_MOUNT_READY' });\n    };\n  }\n\n  mountPlayer () {\n    this.setState({ mounting: true })\n\n    const player = new window.Spotify.Player({\n      name: '_*_HUEIFY_*_',\n      getOAuthToken: (cb) => {\n        const refreshTokenUrl =\n          `/refresh_token?refresh_token=${this.props.refreshToken}`\n        fetch(refreshTokenUrl)\n          .then((response) => response.json())\n          .then(({ access_token }) => cb(access_token))\n      }\n    });\n\n    // Error handling\n    player.addListener('initialization_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n    player.addListener('authentication_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n    player.addListener('account_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n    player.addListener('playback_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n\n    // Playback status updates\n    player.addListener('player_state_changed', (state) => {\n      this.props.dispatch({ type: 'SPOTIFY_PLAYER_STATE_CHANGED', state });\n    });\n\n    // Ready\n    console.log('player exists: ' + !!player)\n    console.log('adding ready listener')\n    player.addListener('ready', ({ device_id }) => {\n      console.log('Ready with Device ID', device_id);\n      this.props.dispatch({ type: 'SPOTIFY_PLAYER_MOUNTED' })\n      this.setState({ mounting: false })\n    });\n\n    // Not Ready\n    player.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    // Connect to the player!\n    player.connect();\n  }\n\n  componentDidMount() {\n    const urlParams = new URLSearchParams(window.location.search),\n          refreshToken = urlParams.get('refresh_token');\n    if (refreshToken) {\n      this.props.dispatch({ type: 'REGISTER_TOKENS', payload: refreshToken })\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    if (\n      this.props.refreshToken &&\n      this.props.spotifyPlayerMountReady &&\n      !this.state.mounting\n    ) {\n      console.log('mounting player')\n      this.mountPlayer();\n    }\n  }\n\n  renderDeviceInfoLoading () {\n    if (this.state.error) {\n      return <h4 className='error'>{this.state.error}</h4>\n    } else {\n      const loading = (\n        this.props.refreshToken &&\n        this.props.spotifyPlayerMountReady &&\n        !this.props.spotifyPlayerMounted\n      )\n      return <CSSTransition in={loading}\n                            exit={false}\n                            timeout={200}\n                            classNames='fade'\n                            unmountOnExit >\n        <div>\n          <h4>Connecting to Spotify</h4>\n          <h6>This could take a minute...</h6>\n        </div>\n      </CSSTransition>\n    }\n\n  }\n\n  renderConnectPrompt () {\n    return isEmpty(this.props.spotifyPlayerState) ?\n      <div>\n        <h4>Connect to device:</h4>\n        <h4><strong>_*_HUEIFY_*_</strong></h4>\n      </div> :\n      null\n  }\n\n  renderDeviceInfo () {\n    return <CSSTransition in={this.props.spotifyPlayerMounted}\n                          timeout={200}\n                          classNames='fade'\n                          unmountOnExit >\n        <div>\n          {this.renderConnectPrompt()}\n        </div>\n      </CSSTransition>\n  }\n\n  render () {\n    return <div>\n      <Helmet>\n        <script src=\"https://sdk.scdn.co/spotify-player.js\"></script>\n      </Helmet>\n      {this.renderDeviceInfoLoading()}\n      {this.renderDeviceInfo()}\n    </div>\n  }\n}\n\nconst mapStateToProps = ({\n  tokens: { refreshToken },\n  spotifyPlayerMountStatus,\n  spotifyPlayerState\n }) => {\n  return {\n    refreshToken,\n    spotifyPlayerState,\n    spotifyPlayerMountReady: spotifyPlayerMountStatus === 'SPOTIFY_PLAYER_MOUNT_READY',\n    spotifyPlayerMounted: spotifyPlayerMountStatus === 'SPOTIFY_PLAYER_MOUNTED',\n  }\n}\n\nexport default connect(mapStateToProps)(PlayerInterface);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { get, isEmpty } from 'lodash';\nimport '../App.scss'\n\nclass HueInterface extends Component {\n\n  async componentDidMount () {\n    const response = await fetch('https://discovery.meethue.com');\n    if (response.ok) {\n      const bridges = await response.json();\n      if (!isEmpty(bridges)) {\n        this.props.dispatch({\n          type: 'HUE_BRIDGES_DISCOVERED',\n          payload: bridges.map((bridge) => bridge.internalipaddress)\n        })\n      }\n    }\n  }\n\n  // TODO: this should be a thunk action (I think?)\n  attemptUserCreations () {\n    this.props.bridgeIPs.forEach((ip) => {\n      return fetch(`http://${ip}/api`, {\n        method: 'POST',\n        body: JSON.stringify({ devicetype: 'hueify#hueify' })\n      }).then((response) => {\n        if (response.ok) {\n          return response.json().then((parsedResponse) => {\n            if (get(parsedResponse, [0, 'success'])) {\n              console.log('success!')\n            }\n          })\n        }\n      })\n    });\n  }\n\n  beginPolling () {\n    this.attemptUserCreations();\n    this.pollingTimeout = setInterval(\n      (() => this.attemptUserCreations()),\n      1000\n    );\n  }\n\n  componentDidUpdate (prevProps) {\n    if (isEmpty(prevProps.bridgeIPs) && !isEmpty(this.props.bridgeIPs)) {\n      this.beginPolling();\n    }\n  }\n\n  render () {\n    return isEmpty(this.props.bridgeIPs) ?\n      null :\n      <ul style={{ margin: '20px', position: 'absolute' }}>\n        <h6>Philips Hue IPs:</h6>\n        {this.props.bridgeIPs.map((ip) => {\n          return <li key={ip}>{ip}</li>\n        })}\n      </ul>\n  }\n}\n\nconst mapStateToProps = ({ bridgeIPs }) => {\n  return { bridgeIPs };\n}\n\nexport default connect(mapStateToProps)(HueInterface);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { chain, get } from 'lodash';\n\nconst TrackInfo = ({ title, artists }) => {\n  return <CSSTransition in={title && artists}\n                        exit={false}\n                        timeout={200}\n                        classNames='fade'\n                        unmountOnExit >\n    <div id='track-info' style={{ transitionDelay: '1200ms', width: '300px' }}>\n      <h5><strong>{title}</strong></h5>\n      <h6 style={{ fontSize: '14px' }}>{artists}</h6>\n    </div>\n  </CSSTransition>\n}\n\nconst mapStateToProps = ({ spotifyPlayerState }) => {\n  const currentTrack = get(spotifyPlayerState, [\n    'track_window',\n    'current_track'\n  ]);\n\n  return {\n    title: get(currentTrack, 'name'),\n    artists: chain(get(currentTrack, 'artists') || [])\n      .map('name')\n      .join(', ')\n      .value()\n  }\n}\n\nexport default connect(mapStateToProps)(TrackInfo)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Bowser from 'bowser';\nimport { assign, first, get, isEmpty, last } from 'lodash';\nimport './App.scss'\n\nimport AlbumArt from './components/album_art'\nimport ColorExtractor from './components/color_extractor'\nimport LoginPrompt from './components/login'\nimport PlayerInterface from './components/player_interface'\nimport HueInterface from './components/hue_interface'\nimport TrackInfo from './components/track_info'\n\nclass App extends Component {\n  constructor () {\n    super();\n    const browserInfo = Bowser.parse(window.navigator.userAgent);\n    this.isBrowserSupported = get(browserInfo, ['platform', 'type']) === 'desktop';\n\n    this.mainStyleBase = {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      transition: 'background-color 0.5s ease, color 0.5s ease'\n    }\n  }\n\n  render () {\n    const mainStyle = assign({}, this.mainStyleBase, {\n      backgroundColor: this.props.darkHex,\n      color: this.props.lightHex,\n    })\n\n    return this.isBrowserSupported ?\n      <div className=\"App\">\n        <HueInterface />\n        <div style={mainStyle}>\n          <LoginPrompt />\n          <AlbumArt />\n          <ColorExtractor />\n          <TrackInfo />\n          <PlayerInterface />\n        </div>\n      </div> :\n      <div className=\"App\">\n        <div style={this.mainStyle}>\n          <h4 className='error'>\n            Sorry homie, Hueify only works on Desktop browsers. :'(\n          </h4>\n        </div>\n      </div>\n  }\n}\n\n// TODO: Fix up fallback logic\nconst mapStateToProps = ({ palette }) => {\n  let darkHex, lightHex;\n  if (!isEmpty(palette)) {\n    darkHex = first(palette).getHex();\n    lightHex = last(palette).getHex();\n    if (darkHex === lightHex) { lightHex = '#FFFFFF' };\n  }\n\n  return { darkHex, lightHex }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root_reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport default function configureStore (initialState = {}) {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n}\n"],"sourceRoot":""}