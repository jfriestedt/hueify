{"version":3,"sources":["reducers/root_reducer.js","reducers/tokens.js","reducers/spotify_player_mount_status.js","reducers/spotify_player_state.js","reducers/hue_bridge_ips.js","reducers/palette.js","components/album_art.js","components/color_extractor.js","components/login.js","components/player_interface.js","actions/tokens.js","components/hue_interface.js","components/track_info.js","App.js","serviceWorker.js","index.js","store.js"],"names":["combineReducers","tokens","state","action","type","assign","pick","spotifyPlayerMountStatus","spotifyPlayerState","playerState","hueBridgeIps","payload","palette","connect","image","chain","get","find","height","value","albumArtUrl","url","alt","src","width","decoding","style","ColorExtractor","swatchStyle","display","fontSize","keys","map","swatchKey","getHex","sort","join","nextAlbumArtUrl","nextPalette","this","props","getPaletteId","Vibrant","filters","getPalette","err","dispatch","colorHex","backgroundColor","key","swatches","renderSwatch","id","marginBottom","Component","loggedIn","refreshToken","className","href","PlayerInterface","mounting","error","window","onSpotifyWebPlaybackSDKReady","setState","player","Spotify","Player","name","getOAuthToken","cb","refreshTokenUrl","fetch","then","response","json","access_token","addListener","message","console","log","device_id","URLSearchParams","location","search","prevProps","prevState","spotifyPlayerMountReady","mountPlayer","loading","spotifyPlayerMounted","CSSTransition","in","exit","timeout","classNames","unmountOnExit","isEmpty","renderConnectPrompt","Helmet","renderDeviceInfoLoading","renderDeviceInfo","HueInterface","bridges","bridge","internalipaddress","bridgeIps","margin","position","ip","currentTrack","title","artist","App","browserInfo","Bowser","parse","navigator","userAgent","isBrowserSupported","mainStyleBase","flexDirection","alignItems","justifyContent","transition","mainStyle","darkHex","color","lightHex","Boolean","hostname","match","ReactDOM","render","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"2KAOeA,4BAAgB,CAC7BC,OCNa,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCACrC,OAAQA,EAAOC,MACb,IAAK,kBACH,OAAOC,iBAAO,GAAIH,EAAOI,eAAKH,EAAQ,iBACxC,QACE,OAAOD,IDEXK,yBETa,WAAoC,IAAnCL,EAAkC,uDAA1B,YAA0B,yCAAXE,EAAW,EAAXA,KACrC,OAAQA,GACN,IAAK,6BACL,IAAK,yBACH,OAAOA,EACT,QACE,OAAOF,IFIXM,mBGVa,WAA+C,IAA9CN,EAA6C,uDAArC,GAAqC,yCAA/BE,EAA+B,EAA/BA,KAAaK,EAAkB,EAAzBP,MAClC,OAAQE,GACN,IAAK,+BACH,OAAOK,EACT,QACE,OAAOP,IHMXQ,aIXa,WAAoC,IAAnCR,EAAkC,uDAA1B,GAA0B,yCAApBE,EAAoB,EAApBA,KAAMO,EAAc,EAAdA,QAClC,OAAQP,GACN,IAAK,yBACH,OAAOO,EACT,QACE,OAAOT,IJOXU,QKZa,WAAoC,IAAnCV,EAAkC,uDAA1B,GAA0B,yCAApBE,EAAoB,EAApBA,KAAMO,EAAc,EAAdA,QAClC,OAAQP,GACN,IAAK,cACH,OAAOO,EACT,QACE,OAAOT,M,qECsBEW,G,MAAAA,aAXS,SAAC,GAA4B,IAA1BL,EAAyB,EAAzBA,mBACnBM,EAAQC,gBAAMP,GACjBQ,IAAI,CAAC,eAAgB,gBAAiB,QAAS,WAC/CC,KAAK,CAAEC,OAAQ,MACfC,QAEH,MAAO,CACLC,YAAaN,EAAQA,EAAMO,IAAM,MAItBR,EAvBE,SAAC,GAAqB,IAAnBO,EAAkB,EAAlBA,YAClB,OAAOA,EACL,yBAAKE,IAAI,YACJC,IAAKH,EACLF,OAAO,MACPM,MAAM,MACNC,SAAS,OACTC,MAAO,CAAER,OAAQ,QACRM,MAAO,WACrB,S,QCREG,E,YACJ,aAAgB,IAAD,8BACb,+CACKC,YAAc,CACjBC,QAAS,eACTL,MAAO,OACPN,OAAQ,OACRY,SAAU,OANC,E,0EAUDlB,GACZ,OAAOmB,eAAKnB,GAASoB,KAAI,SAACC,GACxB,OAAOrB,EAAQqB,GAAWC,YAE3BC,OACAC,KAAK,O,+CAMJ,IAFWC,EAEZ,EAFDjB,YACSkB,EACR,EADD1B,QAEA,OACEyB,IAAoBE,KAAKC,MAAMpB,aAC9BmB,KAAKE,aAAaH,KAAiBC,KAAKE,aAAaF,KAAKC,MAAM5B,W,4CAId,IAAD,SAAhCQ,cACImB,KAAKC,MAAMpB,aACrB,IAAIsB,EAAQH,KAAKC,MAAMpB,YAAa,CAC9CuB,QAAS,KAGPC,YAAW,SAACC,EAAKjC,GACnB,EAAK4B,MAAMM,SAAS,CAAE1C,KAAM,cAAeO,QAASC,S,mCAK5CqB,GACZ,IAAMc,EAAWR,KAAKC,MAAM5B,QAAQqB,GAAWC,SACzCR,EAAQrB,iBAAO,GAAIkC,KAAKX,YAAa,CAAEoB,gBAAiBD,IAE9D,OAAO,yBAAKE,IAAKhB,EAAWP,MAAOA,GAAQO,K,+BAGlC,IAAD,OACR,GAAIM,KAAKC,MAAM5B,QAAS,CACtB,IAAMsC,EAAWnB,eAAKQ,KAAKC,MAAM5B,SAASoB,KAAI,SAACC,GAC7C,OAAO,EAAKkB,aAAalB,MAG3B,OAAO,yBAAKmB,GAAG,UAAU1B,MAAO,CAAE2B,aAAc,SAAWH,GAE3D,OAAO,S,GAxDgBI,aAyEdzC,eAZS,SAAC,GAAqC,IAAnCL,EAAkC,EAAlCA,mBAAoBI,EAAc,EAAdA,QACvCE,EAAQC,gBAAMP,GACjBQ,IAAI,CAAC,eAAgB,gBAAiB,QAAS,WAC/CC,KAAK,CAAEC,OAAQ,KACfC,QAEH,MAAO,CACLC,YAAaN,EAAQA,EAAMO,IAAM,GACjCT,aAIWC,CAAyBc,GChEzBd,eALS,SAACX,GAEvB,MAAO,CAAEqD,WAD4BrD,EAA7BD,OAAUuD,gBAIL3C,EAXK,SAAC,GACnB,OADoC,EAAf0C,SAEjB,KACA,uBAAGE,UAAU,SAASC,KAAK,UAA3B,wB,iBCEAC,E,YACJ,aAAgB,IAAD,8BACb,+CAEKzD,MAAQ,CAAE0D,UAAU,EAAOC,MAAO,MACvCC,OAAOC,6BAA+B,WACpC,EAAKvB,MAAMM,SAAS,CAAE1C,KAAM,gCALjB,E,2EASC,IAAD,OACbmC,KAAKyB,SAAS,CAAEJ,UAAU,IAE1B,IAAMK,EAAS,IAAIH,OAAOI,QAAQC,OAAO,CACvCC,KAAM,eACNC,cAAe,SAACC,GACd,IAAMC,EAAe,uCACa,EAAK/B,MAAMgB,cAC7CgB,MAAMD,GACHE,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,gBAAGG,EAAH,EAAGA,aAAH,OAAsBN,EAAGM,SAKrCX,EAAOY,YAAY,wBAAwB,YAAkB,IAAfC,EAAc,EAAdA,QAC5C,EAAKd,SAAS,CAAEH,MAAOiB,IACvBC,QAAQlB,MAAMiB,MAEhBb,EAAOY,YAAY,wBAAwB,YAAkB,IAAfC,EAAc,EAAdA,QAC5C,EAAKd,SAAS,CAAEH,MAAOiB,IACvBC,QAAQlB,MAAMiB,MAEhBb,EAAOY,YAAY,iBAAiB,YAAkB,IAAfC,EAAc,EAAdA,QACrC,EAAKd,SAAS,CAAEH,MAAOiB,IACvBC,QAAQlB,MAAMiB,MAEhBb,EAAOY,YAAY,kBAAkB,YAAkB,IAAfC,EAAc,EAAdA,QACtC,EAAKd,SAAS,CAAEH,MAAOiB,IACvBC,QAAQlB,MAAMiB,MAIhBb,EAAOY,YAAY,wBAAwB,SAAC3E,GAC1C,EAAKsC,MAAMM,SAAS,CAAE1C,KAAM,+BAAgCF,aAI9D6E,QAAQC,IAAI,oBAAsBf,GAClCc,QAAQC,IAAI,yBACZf,EAAOY,YAAY,SAAS,YAAoB,IAAjBI,EAAgB,EAAhBA,UAC7BF,QAAQC,IAAI,uBAAwBC,GACpC,EAAKzC,MAAMM,SAAS,CAAE1C,KAAM,2BAC5B,EAAK4D,SAAS,CAAEJ,UAAU,OAI5BK,EAAOY,YAAY,aAAa,YAAoB,IAAjBI,EAAgB,EAAhBA,UACjCF,QAAQC,IAAI,6BAA8BC,MAI5ChB,EAAOpD,Y,0CAIP,ICxEqBZ,EDyEfuD,EADY,IAAI0B,gBAAgBpB,OAAOqB,SAASC,QACvBpE,IAAI,iBAC/BwC,GACFjB,KAAKC,MAAMM,UC3EQ7C,ED2EgB,CAAEuD,gBC1ElCnD,iBAAOJ,EAAQ,CAAEG,KAAM,wB,yCD8EViF,EAAWC,GAE3B/C,KAAKC,MAAMgB,cACXjB,KAAKC,MAAM+C,0BACVhD,KAAKrC,MAAM0D,WAEZmB,QAAQC,IAAI,mBACZzC,KAAKiD,iB,gDAKP,GAAIjD,KAAKrC,MAAM2D,MACb,OAAO,wBAAIJ,UAAU,SAASlB,KAAKrC,MAAM2D,OAEzC,IAAM4B,EACJlD,KAAKC,MAAMgB,cACXjB,KAAKC,MAAM+C,0BACVhD,KAAKC,MAAMkD,qBAEd,OAAO,kBAACC,EAAA,EAAD,CAAeC,GAAIH,EACJI,MAAM,EACNC,QAAS,IACTC,WAAW,cACXC,eAAa,GACjC,6BACE,qDACA,+D,4CAQN,OAAOC,kBAAQ1D,KAAKC,MAAMhC,oBACxB,6BACE,kDACA,4BAAI,kDAEN,O,yCAIF,OAAO,kBAACmF,EAAA,EAAD,CAAeC,GAAIrD,KAAKC,MAAMkD,qBACfI,QAAS,IACTC,WAAW,cACXC,eAAa,GAC/B,6BACGzD,KAAK2D,0B,+BAMZ,OAAO,6BACL,kBAACC,EAAA,OAAD,KACE,4BAAQ5E,IAAI,2CAEbgB,KAAK6D,0BACL7D,KAAK8D,wB,GArIkB/C,aAuJfzC,eAbS,SAAC,GAIjB,IAHI2C,EAGL,EAHLvD,OAAUuD,aACVjD,EAEK,EAFLA,yBAGA,MAAO,CACLiD,eACAhD,mBAHG,EADLA,mBAKE+E,wBAAsD,+BAA7BhF,EACzBmF,qBAAmD,2BAA7BnF,KAIXM,CAAyB8C,GE1JlC2C,E,4LAEkB,IAAD,OAUnB,OATkB9B,MAAM,kCACrBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC8B,GACL,EAAK/D,MAAMM,SAAS,CAClB1C,KAAM,yBACNO,QAAS4F,EAAQvE,KAAI,SAACwE,GAAD,OAAYA,EAAOC,4B,yCAO5BpB,GACdY,kBAAQZ,EAAUqB,YAAeT,kBAAQ1D,KAAKC,MAAMkE,a,+BAMxD,OAAOT,kBAAQ1D,KAAKC,MAAM9B,cACxB,KACA,wBAAIgB,MAAO,CAAEiF,OAAQ,OAAQC,SAAU,aACrC,gDACCrE,KAAKC,MAAM9B,aAAasB,KAAI,SAAC6E,GAC5B,OAAO,wBAAI5D,IAAK4D,GAAKA,W,GA3BJvD,aAqCZzC,eAJS,SAAC,GACvB,MAAO,CAAEH,aADmC,EAAnBA,gBAIZG,CAAyByF,GCjBzBzF,eAZS,SAAC,GAA4B,IAA1BL,EAAyB,EAAzBA,mBACnBsG,EAAe9F,cAAIR,EAAoB,CAC3C,eACA,kBAGF,MAAO,CACLuG,MAAO/F,cAAI8F,EAAc,QACzBE,OAAQhG,cAAI8F,EAAc,CAAC,UAAW,EAAG,YAI9BjG,EArBG,SAAC,GAAuB,IAArBkG,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC1B,OAAQD,GAASC,EACf,yBAAK5D,GAAG,aAAa1B,MAAO,CAAEF,MAAO,UACnC,4BAAKuF,GACL,4BAAKC,IAEP,QCGEC,E,YACJ,aAAgB,IAAD,sBACb,8CACA,IAAMC,EAAcC,IAAOC,MAAMtD,OAAOuD,UAAUC,WAFrC,OAGb,EAAKC,mBAAgE,YAA3CvG,cAAIkG,EAAa,CAAC,WAAY,SAExD,EAAKM,cAAgB,CACnB3F,QAAS,OACT4F,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBnG,MAAO,OACPN,OAAQ,OACR0F,SAAU,WACVgB,WAAY,+CAbD,E,sEAkBb,IAAMC,EAAYxH,iBAAO,GAAIkC,KAAKiF,cAAe,CAC/CxE,gBAAiBT,KAAKC,MAAMsF,QAC5BC,MAAOxF,KAAKC,MAAMwF,WAGpB,OAAOzF,KAAKgF,mBACV,yBAAK9D,UAAU,OACb,kBAAC,EAAD,MACA,yBAAK/B,MAAOmG,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAGJ,yBAAKpE,UAAU,OACb,yBAAK/B,MAAOa,KAAKsF,WACf,wBAAIpE,UAAU,SAAd,iE,GArCQH,aAoDHzC,eAPS,SAAC,GAAiB,IAAfD,EAAc,EAAdA,QACzB,MAAO,CACLoH,SAAU/B,kBAAQrF,GAAW,KAAOA,EAAO,aAAiBsB,SAC5D4F,QAAS7B,kBAAQrF,GAAW,KAAOA,EAAO,YAAgBsB,YAI/CrB,CAAyBoG,GCrDpBgB,QACW,cAA7BnE,OAAOqB,SAAS+C,UAEe,UAA7BpE,OAAOqB,SAAS+C,UAEhBpE,OAAOqB,SAAS+C,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUC,MCJG,WACb,OADyD,wDAClDC,sBACLC,EACAC,8BAAoBC,0BAAgBC,ODCrBC,IACf,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBzB,WACrBA,UAAU0B,cAAcC,MAAMvE,MAAK,SAAAwE,GACjCA,EAAaC,iB","file":"static/js/main.a01f715f.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport tokens from './tokens';\nimport spotifyPlayerMountStatus from './spotify_player_mount_status'\nimport spotifyPlayerState from './spotify_player_state'\nimport hueBridgeIps from './hue_bridge_ips'\nimport palette from './palette'\n\nexport default combineReducers({\n  tokens,\n  spotifyPlayerMountStatus,\n  spotifyPlayerState,\n  hueBridgeIps,\n  palette\n});\n","import { assign, pick } from 'lodash';\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case 'REGISTER_TOKENS':\n      return assign({}, state, pick(action, 'refreshToken'));\n    default:\n      return state;\n  }\n}\n","export default (state = 'NOT_READY', { type }) => {\n  switch (type) {\n    case 'SPOTIFY_PLAYER_MOUNT_READY':\n    case 'SPOTIFY_PLAYER_MOUNTED':\n      return type\n    default:\n      return state;\n  }\n}\n","export default (state = {}, { type, state: playerState }) => {\n  switch (type) {\n    case 'SPOTIFY_PLAYER_STATE_CHANGED':\n      return playerState;\n    default:\n      return state;\n  }\n}\n","export default (state = [], { type, payload }) => {\n  switch (type) {\n    case 'HUE_BRIDGES_DISCOVERED':\n      return payload\n    default:\n      return state;\n  }\n}\n","export default (state = {}, { type, payload }) => {\n  switch (type) {\n    case 'NEW_PALETTE':\n      return payload;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { chain } from 'lodash';\n\nconst AlbumArt = ({ albumArtUrl }) => {\n  return albumArtUrl ?\n    <img alt='album art'\n         src={albumArtUrl}\n         height='300'\n         width='300'\n         decoding='sync'\n         style={{ height: '300px',\n                  width: '300px' }} /> :\n    null\n}\n\nconst mapStateToProps = ({ spotifyPlayerState }) => {\n  const image = chain(spotifyPlayerState)\n    .get(['track_window', 'current_track', 'album', 'images'])\n    .find({ height: 300 })\n    .value();\n\n  return {\n    albumArtUrl: image ? image.url : ''\n  }\n}\n\nexport default connect(mapStateToProps)(AlbumArt)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { assign, chain, keys } from 'lodash'\nimport * as Vibrant from 'node-vibrant'\n\nclass ColorExtractor extends Component {\n  constructor () {\n    super();\n    this.swatchStyle = {\n      display: 'inline-block',\n      width: '50px',\n      height: '50px',\n      fontSize: '6px',\n    }\n  }\n\n  getPaletteId (palette) {\n    return keys(palette).map((swatchKey) => {\n      return palette[swatchKey].getHex()\n    })\n    .sort()\n    .join('_')\n  }\n\n  shouldComponentUpdate ({\n    albumArtUrl: nextAlbumArtUrl,\n    palette: nextPalette\n  }) {\n    return (\n      nextAlbumArtUrl !== this.props.albumArtUrl ||\n      (this.getPaletteId(nextPalette) !== this.getPaletteId(this.props.palette))\n    )\n  }\n\n  componentDidUpdate ({ albumArtUrl: prevAlbumArtUrl }) {\n    if (prevAlbumArtUrl !== this.props.albumArtUrl) {\n      const vib = new Vibrant(this.props.albumArtUrl, {\n        filters: []\n      });\n\n      vib.getPalette((err, palette) => {\n        this.props.dispatch({ type: 'NEW_PALETTE', payload: palette })\n      });\n    }\n  }\n\n  renderSwatch (swatchKey) {\n    const colorHex = this.props.palette[swatchKey].getHex(),\n          style = assign({}, this.swatchStyle, { backgroundColor: colorHex })\n\n    return <div key={swatchKey} style={style}>{swatchKey}</div>;\n  }\n\n  render () {\n    if (this.props.palette) {\n      const swatches = keys(this.props.palette).map((swatchKey) => {\n        return this.renderSwatch(swatchKey);\n      })\n\n      return <div id='palette' style={{ marginBottom: '20px' }}>{swatches}</div>\n    } else {\n      return null;\n    }\n  }\n}\n\nconst mapStateToProps = ({ spotifyPlayerState, palette }) => {\n  const image = chain(spotifyPlayerState)\n    .get(['track_window', 'current_track', 'album', 'images'])\n    .find({ height: 64 })\n    .value();\n\n  return {\n    albumArtUrl: image ? image.url : '',\n    palette\n  }\n}\n\nexport default connect(mapStateToProps)(ColorExtractor);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LoginPrompt = ({ loggedIn }) => {\n  return loggedIn\n    ? null\n    : <a className='button' href='/login'>Log in to Spotify</a>\n}\n\nconst mapStateToProps = (state) => {\n  const { tokens: { refreshToken } } = state\n  return { loggedIn: !!refreshToken }\n}\n\nexport default connect(mapStateToProps)(LoginPrompt);\n","import React, { Component } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport { CSSTransition } from 'react-transition-group';\nimport registerTokens from '../actions/tokens';\nimport '../App.scss'\n\nclass PlayerInterface extends Component {\n  constructor () {\n    super();\n\n    this.state = { mounting: false, error: null }\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      this.props.dispatch({ type: 'SPOTIFY_PLAYER_MOUNT_READY' });\n    };\n  }\n\n  mountPlayer () {\n    this.setState({ mounting: true })\n\n    const player = new window.Spotify.Player({\n      name: '_*_HUEIFY_*_',\n      getOAuthToken: (cb) => {\n        const refreshTokenUrl =\n          `/refresh_token?refresh_token=${this.props.refreshToken}`\n        fetch(refreshTokenUrl)\n          .then((response) => response.json())\n          .then(({ access_token }) => cb(access_token))\n      }\n    });\n\n    // Error handling\n    player.addListener('initialization_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n    player.addListener('authentication_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n    player.addListener('account_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n    player.addListener('playback_error', ({ message }) => {\n      this.setState({ error: message })\n      console.error(message);\n    });\n\n    // Playback status updates\n    player.addListener('player_state_changed', (state) => {\n      this.props.dispatch({ type: 'SPOTIFY_PLAYER_STATE_CHANGED', state });\n    });\n\n    // Ready\n    console.log('player exists: ' + !!player)\n    console.log('adding ready listener')\n    player.addListener('ready', ({ device_id }) => {\n      console.log('Ready with Device ID', device_id);\n      this.props.dispatch({ type: 'SPOTIFY_PLAYER_MOUNTED' })\n      this.setState({ mounting: false })\n    });\n\n    // Not Ready\n    player.addListener('not_ready', ({ device_id }) => {\n      console.log('Device ID has gone offline', device_id);\n    });\n\n    // Connect to the player!\n    player.connect();\n  }\n\n  componentDidMount() {\n    const urlParams = new URLSearchParams(window.location.search),\n          refreshToken = urlParams.get('refresh_token');\n    if (refreshToken) {\n      this.props.dispatch(registerTokens({ refreshToken }))\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    if (\n      this.props.refreshToken &&\n      this.props.spotifyPlayerMountReady &&\n      !this.state.mounting\n    ) {\n      console.log('mounting player')\n      this.mountPlayer();\n    }\n  }\n\n  renderDeviceInfoLoading () {\n    if (this.state.error) {\n      return <h4 className='error'>{this.state.error}</h4>\n    } else {\n      const loading = (\n        this.props.refreshToken &&\n        this.props.spotifyPlayerMountReady &&\n        !this.props.spotifyPlayerMounted\n      )\n      return <CSSTransition in={loading}\n                            exit={false}\n                            timeout={200}\n                            classNames='device-info'\n                            unmountOnExit >\n        <div>\n          <h4>Connecting to Spotify</h4>\n          <h6>This could take a minute...</h6>\n        </div>\n      </CSSTransition>\n    }\n\n  }\n\n  renderConnectPrompt () {\n    return isEmpty(this.props.spotifyPlayerState) ?\n      <div>\n        <h4>Connect to device:</h4>\n        <h4><strong>_*_HUEIFY_*_</strong></h4>\n      </div> :\n      null\n  }\n\n  renderDeviceInfo () {\n    return <CSSTransition in={this.props.spotifyPlayerMounted}\n                          timeout={200}\n                          classNames='device-info'\n                          unmountOnExit >\n        <div>\n          {this.renderConnectPrompt()}\n        </div>\n      </CSSTransition>\n  }\n\n  render () {\n    return <div>\n      <Helmet>\n        <script src=\"https://sdk.scdn.co/spotify-player.js\"></script>\n      </Helmet>\n      {this.renderDeviceInfoLoading()}\n      {this.renderDeviceInfo()}\n    </div>\n  }\n}\n\nconst mapStateToProps = ({\n  tokens: { refreshToken },\n  spotifyPlayerMountStatus,\n  spotifyPlayerState\n }) => {\n  return {\n    refreshToken,\n    spotifyPlayerState,\n    spotifyPlayerMountReady: spotifyPlayerMountStatus === 'SPOTIFY_PLAYER_MOUNT_READY',\n    spotifyPlayerMounted: spotifyPlayerMountStatus === 'SPOTIFY_PLAYER_MOUNTED',\n  }\n}\n\nexport default connect(mapStateToProps)(PlayerInterface);\n","import { assign } from 'lodash'\n\nexport default function (tokens) {\n  return assign(tokens, { type: 'REGISTER_TOKENS' })\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport '../App.scss'\n\nclass HueInterface extends Component {\n\n  componentDidMount () {\n    const bridgeIPs = fetch('https://discovery.meethue.com/')\n      .then((response) => response.json() )\n      .then((bridges) => {\n        this.props.dispatch({\n          type: 'HUE_BRIDGES_DISCOVERED',\n          payload: bridges.map((bridge) => bridge.internalipaddress)\n        })\n      })\n\n    return bridgeIPs\n  }\n\n  componentDidUpdate (prevProps) {\n    if (isEmpty(prevProps.bridgeIps) && !isEmpty(this.props.bridgeIps)) {\n      // this.beginPolling();\n    }\n  }\n\n  render () {\n    return isEmpty(this.props.hueBridgeIps) ?\n      null :\n      <ul style={{ margin: '20px', position: 'absolute' }}>\n        <h6>Philips Hue IPs:</h6>\n        {this.props.hueBridgeIps.map((ip) => {\n          return <li key={ip}>{ip}</li>\n        })}\n      </ul>\n  }\n}\n\nconst mapStateToProps = ({ hueBridgeIps }) => {\n  return { hueBridgeIps }\n}\n\nexport default connect(mapStateToProps)(HueInterface);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { get } from 'lodash';\n\nconst TrackInfo = ({ title, artist }) => {\n  return (title && artist) ?\n    <div id='track-info' style={{ width: '300px' }}>\n      <h4>{title}</h4>\n      <h5>{artist}</h5>\n    </div> :\n    null\n}\n\nconst mapStateToProps = ({ spotifyPlayerState }) => {\n  const currentTrack = get(spotifyPlayerState, [\n    'track_window',\n    'current_track'\n  ]);\n\n  return {\n    title: get(currentTrack, 'name'),\n    artist: get(currentTrack, ['artists', 0, 'name'])\n  }\n}\n\nexport default connect(mapStateToProps)(TrackInfo)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Bowser from 'bowser';\nimport { assign, get, isEmpty } from 'lodash';\nimport './App.scss'\n\nimport AlbumArt from './components/album_art'\nimport ColorExtractor from './components/color_extractor'\nimport LoginPrompt from './components/login'\nimport PlayerInterface from './components/player_interface'\nimport HueInterface from './components/hue_interface'\nimport TrackInfo from './components/track_info'\n\nclass App extends Component {\n  constructor () {\n    super();\n    const browserInfo = Bowser.parse(window.navigator.userAgent);\n    this.isBrowserSupported = get(browserInfo, ['platform', 'type']) === 'desktop';\n\n    this.mainStyleBase = {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      transition: 'background-color 0.5s ease, color 0.5s ease'\n    }\n  }\n\n  render () {\n    const mainStyle = assign({}, this.mainStyleBase, {\n      backgroundColor: this.props.darkHex,\n      color: this.props.lightHex,\n    })\n\n    return this.isBrowserSupported ?\n      <div className=\"App\">\n        <HueInterface />\n        <div style={mainStyle}>\n          <LoginPrompt />\n          <AlbumArt />\n          <ColorExtractor />\n          <TrackInfo />\n          <PlayerInterface />\n        </div>\n      </div> :\n      <div className=\"App\">\n        <div style={this.mainStyle}>\n          <h4 className='error'>\n            Sorry homie, Hueify only works on Desktop browsers. :'(\n          </h4>\n        </div>\n      </div>\n  }\n}\n\nconst mapStateToProps = ({ palette }) => {\n  return {\n    lightHex: isEmpty(palette) ? null : palette['LightVibrant'].getHex(),\n    darkHex: isEmpty(palette) ? null : palette['DarkVibrant'].getHex()\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/root_reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport default function configureStore (initialState = {}) {\n  return createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n}\n"],"sourceRoot":""}